#include "stdafx.h"
#include "dVector.h"

class matrix

{
private:
	
	dvector **m;
	int nRows; 
	int nCols;
	int emptyRow = 0;       //matrix index that correspondsd to the first empty row where to append a vector
	int checkInverse = 0;	//if matrix has just been inverted, this gets set to 1
	double determinant;

public:

	matrix(int R, int C) : nRows(R), nCols(C)		//main constructor	
	{
		m = new dvector*[nRows];
		for (int i = 0; i < nRows; i++)
		{
			m[i] = new dvector(nCols);
		}
	}
	matrix(istream &stream);						//user input matrix values
	matrix(const matrix&);							//copy constructor
	~matrix();										//destructor
	
	matrix &operator = (const matrix &other);		//copy assignment operator
	matrix &operator +(const matrix &other);		//addition operator
	
	
	void output();									//output matrix
	double det();									//function to get determinant of a matrix		!!NEEDS POLISHING!!
	bool isSquare();								//check if matrix is sqare and therefore invertible !!GLITCHY!!
	
	

	friend matrix *transpose(matrix &other);		//take the take the transposition of another matrix
	friend matrix *inverse(matrix &other);			//take the inverse of a matrix !!RIGHT NOW ONLY WORKS FOR 2x2, NEEDS POLISHING!!!

	//THESE FUNCTIONS ARE FOCUSED ON MY CURRENT GOAL OF INVERTING MATRICES BY RREF TECHNIQUE:

	matrix identity();							//create an identity matrix of corresponding size
	matrix identity(int);
	matrix RREFmatrix();						//adjoin matrix to be inverted with its identity matrix

	

	//SEMI USELESS FUNCTIONS:
	void appendVector(const dvector&);				 //function to append vectors to matrixes
	

	

 

};
